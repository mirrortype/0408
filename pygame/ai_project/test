import pygame
import sys
import random

# pygame 초기화
pygame.init()

# 화면 크기 설정
SCREEN_SIZE = (800, 800)
screen = pygame.display.set_mode(SCREEN_SIZE)
pygame.display.set_caption("중앙을 기준으로 떨어지는 눈송이")

# 작은 이미지 로드 및 초기 크기 설정
small_object_image = pygame.image.load('c:/Users/CODEPLAY_VIVO1/Downloads/SNOW.png')

# 떨어지는 객체 정보
objects = []  # 떨어지는 객체를 저장할 리스트
SPAWN_RATE = 10  # 객체가 생성될 빈도

# 메인 루프
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # 화면을 흰색으로 채우기
    screen.fill((255, 255, 255))

    # 떨어지는 객체 생성
    if random.randint(1, SPAWN_RATE) == 1:
        x = random.randint(0, SCREEN_SIZE[0] - 50)  # 떨어지는 X 좌표
        y = 0
        size = random.randint(30, 70)  # 랜덤한 크기
        speed = random.randint(3, 8)  # 랜덤한 속도
        angle = 0  # 초기 회전 각도
        resized_image = pygame.transform.scale(small_object_image, (size, size))
        objects.append([x, y, resized_image, speed, angle])  # [x, y, image, speed, angle] 정보로 객체 추가

    # 떨어지는 객체 이동 및 화면에 그리기
    for obj in objects[:]:
        obj[1] += obj[3]  # 객체의 Y 좌표 업데이트
        rotated_rect = obj[2].get_rect(center=(obj[0] + obj[2].get_width() // 2, obj[1] + obj[2].get_height() // 2))
        rotated_image = pygame.transform.rotate(obj[2], obj[4])  # 중심을 기준으로 이미지 회전
        screen.blit(rotated_image, rotated_rect.topleft)  # 회전된 이미지 그리기

        # 회전 각도 및 크기 업데이트
        obj[4] += 5  # 회전 각도를 5도씩 증가

        # 화면 밖으로 나간 객체 제거
        if obj[1] > SCREEN_SIZE[1]:
            objects.remove(obj)

    # 화면 업데이트
    pygame.display.flip()

    # 초당 프레임 수 설정 (여기서는 60FPS)
    pygame.time.Clock().tick(60)
